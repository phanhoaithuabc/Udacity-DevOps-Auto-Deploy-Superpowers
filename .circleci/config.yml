version: 2.1

orbs: 
  slack: circleci/slack@4.9.3

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            # Your code goes here  

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                # Your Memstash or kvdb.io GET URL code goes here
                # Example: Memstash.io
                SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
                # Example: kvdb.io
                SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: ansible/ansible
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "ff:49:1e:eb:73:f1:cb:73:64:03:8c:74:7e:98:09:b0"
      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: project/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apt install tar gzip ansible aws-cli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/project/backend
      - run:
          name: Install dependencies
          command: |
            apt install Python Ansible Node NPM aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances...............)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            # backend url gets "baked" into the front-end
            npm run build
            # Copy the files to your new S3 Bucket using AWS CLI
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: ansible/ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "ff:49:1e:eb:73:f1:cb:73:64:03:8c:74:7e:98:09:b0"
      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: project/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            # your code here
            apt install tar gzip nodejs npm
      # install node-exporter for prometheus monitoring
      - run:
          name: Install dependencies
          command: |
            # your code here
            # Install prometheus
            sudo useradd --no-create-home prometheus
            sudo mkdir /etc/prometheus
            sudo mkdir /var/lib/prometheus
            wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz
            tar xvfz prometheus-2.19.0.linux-amd64.tar.gz
            sudo cp prometheus-2.19.0.linux-amd64/prometheus /usr/local/bin
            sudo cp prometheus-2.19.0.linux-amd64/promtool /usr/local/bin/
            sudo cp -r prometheus-2.19.0.linux-amd64/consoles /etc/prometheus
            sudo cp -r prometheus-2.19.0.linux-amd64/console_libraries /etc/prometheus
            sudo cp prometheus-2.19.0.linux-amd64/promtool /usr/local/bin/
            rm -rf prometheus-2.19.0.linux-amd64.tar.gz prometheus-2.19.0.linux-amd64
            # Initially and as a proof of concept we can configure Prometheus to monitor itself. All what we need to do is create or replace the content of /etc/prometheus/prometheus.yml.
            sudo touch /etc/prometheus/prometheus.yml
            sudo chmod 777 /etc/prometheus/prometheus.yml
            sudo echo "global:" >> /etc/prometheus/prometheus.yml
            sudo echo "  scrape_interval: 15s" >> /etc/prometheus/prometheus.yml
            sudo echo "  external_labels:" >> /etc/prometheus/prometheus.yml
            sudo echo "    monitor: 'prometheus'" >> /etc/prometheus/prometheus.yml
            sudo echo "scrape_configs:" >> /etc/prometheus/prometheus.yml
            sudo echo "  - job_name: 'prometheus'" >> /etc/prometheus/prometheus.yml
            sudo echo "    static_configs:" >> /etc/prometheus/prometheus.yml
            sudo echo "      - targets: ['localhost:9090']" >> /etc/prometheus/prometheus.yml
            # We might want Prometheus to be available as a service. Every time we reboot the system Prometheus will start with the OS. Create /etc/systemd/system/prometheus.service and add to it the following content:
            sudo touch /etc/systemd/system/prometheus.service
            sudo chmod 777 /etc/systemd/system/prometheus.service
            sudo echo "[Unit]" >> /etc/systemd/system/prometheus.service
            sudo echo "Description=Prometheus" >> /etc/systemd/system/prometheus.service
            sudo echo "Wants=network-online.target" >> /etc/systemd/system/prometheus.service
            sudo echo "After=network-online.target" >> /etc/systemd/system/prometheus.service
            sudo echo "[Service]" >> /etc/systemd/system/prometheus.service
            sudo echo "User=prometheus" >> /etc/systemd/system/prometheus.service
            sudo echo "Group=prometheus" >> /etc/systemd/system/prometheus.service
            sudo echo "Type=simple" >> /etc/systemd/system/prometheus.service
            sudo echo "ExecStart=/usr/local/bin/prometheus \\" >> /etc/systemd/system/prometheus.service
            sudo echo "    --config.file /etc/prometheus/prometheus.yml \\" >> /etc/systemd/system/prometheus.service
            sudo echo "    --storage.tsdb.path /var/lib/prometheus/ \\" >> /etc/systemd/system/prometheus.service
            sudo echo "    --web.console.templates=/etc/prometheus/consoles \\" >> /etc/systemd/system/prometheus.service
            sudo echo "    --web.console.libraries=/etc/prometheus/console_libraries" >> /etc/systemd/system/prometheus.service
            sudo echo "[Install]" >> /etc/systemd/system/prometheus.service
            sudo echo "WantedBy=multi-user.target" >> /etc/systemd/system/prometheus.service
            # change the permissions of the directories, files and binaries we just added to our system.
            sudo chown prometheus:prometheus /etc/prometheus
            sudo chown prometheus:prometheus /usr/local/bin/prometheus
            sudo chown prometheus:prometheus /usr/local/bin/promtool
            sudo chown -R prometheus:prometheus /etc/prometheus/consoles
            sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
            sudo chown -R prometheus:prometheus /var/lib/prometheus
            # Now we need to configure systemd.
            sudo systemctl daemon-reload
            sudo systemctl enable prometheus

            # Install node-exporter
            # create a user for Prometheus Node Exporter
            sudo useradd --no-create-home node_exporter
            # install Node Exporter binaries
            wget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
            tar xzf node_exporter-1.0.1.linux-amd64.tar.gz
            sudo cp -r node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin/node_exporter
            rm -rf node_exporter-1.0.1.linux-amd64.tar.gz node_exporter-1.0.1.linux-amd64
            # Configure a service. Create /etc/systemd/system/node-exporter.service if it doesn’t exist
            sudo touch /etc/systemd/system/node-exporter.service
            sudo chmod 777 /etc/systemd/system/node-exporter.service
            echo "[Unit]" >> /etc/systemd/system/node-exporter.service
            echo "Description=Prometheus Node Exporter Service" >> /etc/systemd/system/node-exporter.service
            echo "After=network.target" >> /etc/systemd/system/node-exporter.service
            echo "[Service]" >> /etc/systemd/system/node-exporter.service
            echo "User=node_exporter" >> /etc/systemd/system/node-exporter.service
            echo "Group=node_exporter" >> /etc/systemd/system/node-exporter.service
            echo "Type=simple" >> /etc/systemd/system/node-exporter.service
            echo "ExecStart=/usr/local/bin/node_exporter" >> /etc/systemd/system/node-exporter.service
            echo "[Install]" >> /etc/systemd/system/node-exporter.service
            echo "WantedBy=multi-user.target" >> /etc/systemd/system/node-exporter.service
            # Configure systemd
            systemctl daemon-reload
            systemctl enable node-exporter
            systemctl start node-exporter
            systemctl status node-exporter
            # Edit /etc/prometheus/prometheus.yml file.
            sudo touch /etc/prometheus/prometheus.yml
            sudo chmod 777 /etc/prometheus/prometheus.yml
            echo "global:" >> /etc/prometheus/prometheus.yml
            echo "  scrape_interval: 15s" >> /etc/prometheus/prometheus.yml
            echo "  external_labels:" >> /etc/prometheus/prometheus.yml
            echo "    monitor: 'prometheus'" >> /etc/prometheus/prometheus.yml
            echo "scrape_configs:" >> /etc/prometheus/prometheus.yml
            echo "  - job_name: 'node_exporter'" >> /etc/prometheus/prometheus.yml
            echo "    static_configs:" >> /etc/prometheus/prometheus.yml
            echo "      - targets: ['ec2-13-58-127-241.us-east-2.compute.amazonaws.com:9100']" >> /etc/prometheus/prometheus.yml
            # Restart Prometheus service.
            sudo systemctl restart prometheus
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apt install curl nodejs npm aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here

      - run:
          name: Backend smoke test.
          command: |
            # your code here
            # Fetch and prepare the BACKEND_IP env var
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        # Docker image here
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
              
              # You can use any condition like:
              # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
              then
              # your code goes here
              else
              # your code goes here
              fi
              
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]