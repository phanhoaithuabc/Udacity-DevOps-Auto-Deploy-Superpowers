version: 2.1

orbs: 
  slack: circleci/slack@4.9.3
  aws-cli: circleci/aws-cli@2.0.6

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code goes here  
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
    
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow
    steps:
      - run: 
          name: Revert migrations
          when: on_fail
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            source ~/.profile 
            nvm install v13.8.0
            SUCCESS=$(tail ~/project/backend/migration-results.txt)
            if (( $SUCCESS == 1 ));
            then
              echo "revert migration..."
              cd ~/project/backend
              npm install 
              npm run migration:revert
            else
              echo "Dont revert migration"
            fi   

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: back-end scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible
      # Here's where you will add some code to rollback on failure  
      - destroy-environment    

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: brunneis/python:3.8.3-ubuntu-20.04
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["05:12:ee:9f:ef:1c:4a:45:36:aa:dc:c1:08:5c:8d:8f"]
      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apt update
            apt -y upgrade 
            apt -y install tar gzip unzip curl
            # software-properties-common
            # add-apt-repository ppa:deadsnakes/ppa -y
            apt -y install ansible
            pip install ansible
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure     
      - destroy-environment 

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:16.13.1
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - aws-cli/setup
      - run:
          name: run migration
          command: |
            echo "TYPEORM_CONNECTION = ${TYPEORM_CONNECTION}" >> ~/project/backend/.env
            echo "TYPEORM_ENTITIES = ${TYPEORM_ENTITIES}" >> ~/project/backend/.env
            echo "TYPEORM_HOST = ${TYPEORM_HOST}" >> ~/project/backend/.env
            echo "TYPEORM_PORT = ${TYPEORM_PORT}" >> ~/project/backend/.env
            echo "TYPEORM_USERNAME = ${TYPEORM_USERNAME}" >> ~/project/backend/.env
            echo "TYPEORM_PASSWORD = ${TYPEORM_PASSWORD}" >> ~/project/backend/.env
            echo "TYPEORM_DATABASE = ${TYPEORM_DATABASE}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS = ${TYPEORM_MIGRATIONS}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS_DIR = ${TYPEORM_MIGRATIONS_DIR}" >> ~/project/backend/.env
            cd ~/project/backend
            # source ~/.profile 
            # nvm install v13.8.0 
            npm install 
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm run migrations > migrations_dump.txt 
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "4WiWChKRYZreuJYXqzgZFL" in your local terminal first
                curl https://kvdb.io/4WiWChKRYZreuJYXqzgZFL/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                echo "1" >> ~/project/backend/migration-results.txt
            else
                cat ~/project/backend/migrations_dump.txt
                echo "fail" >> ~/project/backend/migration-results.txt
            fi
      # Here's where you will add some code to rollback on failure      
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/backend/migration-results.txt
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/node:16.13.1
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y gzip tar
      - attach_workspace:
          at: ~/project/frontend
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            # backend url gets "baked" into the front-end
            # Copy the files to your new S3 Bucket using AWS CLI
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure   
      - revert-migrations
      - destroy-environment   
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["05:12:ee:9f:ef:1c:4a:45:36:aa:dc:c1:08:5c:8d:8f"]
      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/project/backend
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            apk add --update npm
            apk add --update nodejs
      - run:
          name: Deploy backend
          command: |
            # your code here
            echo NODE_ENV=production >> ~/project/backend/.env
            echo "TYPEORM_CONNECTION = ${TYPEORM_CONNECTION}" >> ~/project/backend/.env
            echo "TYPEORM_ENTITIES = ${TYPEORM_ENTITIES}" >> ~/project/backend/.env
            echo "TYPEORM_HOST = ${TYPEORM_HOST}" >> ~/project/backend/.env
            echo "TYPEORM_PORT = ${TYPEORM_PORT}" >> ~/project/backend/.env
            echo "TYPEORM_USERNAME = ${TYPEORM_USERNAME}" >> ~/project/backend/.env
            echo "TYPEORM_PASSWORD = ${TYPEORM_PASSWORD}" >> ~/project/backend/.env
            echo "TYPEORM_DATABASE = ${TYPEORM_DATABASE}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS = ${TYPEORM_MIGRATIONS}" >> ~/project/backend/.env
            echo "TYPEORM_MIGRATIONS_DIR = ${TYPEORM_MIGRATIONS_DIR}" >> ~/project/backend/.env
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ./.circleci/ansible/roles/deploy/files
            cp -r artifact.tar.gz ./.circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Content of inventory"
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/node:16.13.1
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt install curl
      - aws-cli/setup
      - attach_workspace: 
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations 

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/node:16.13.1
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Save previous workflow ID
          command: |
            export previousWorkflowIDFull=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate)
            export previousWorkflowID=${previousWorkflowIDFull: -7}
            echo $previousWorkflowID >> ~/project/previous-workflow-id.txt
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/previous-workflow-id.txt
      - destroy-environment
      - revert-migrations

  cleanup:
      docker:
        # Docker image here
        - image: cimg/node:16.13.1
      steps:
        # Checkout code from git
        - checkout
        - attach_workspace:
            at: ~/
        - aws-cli/setup
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              # Fetch the Old workflow ID
              # export previousWorkflowID=$(tail -n 1 ~/project/previous-workflow-id.txt)
              export previousWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              echo previousWorkflowID: "${previousWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${previousWorkflowID}"]]
              then
                # your code here
                aws s3 rm "s3://udapeople-${previousWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${previousWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${previousWorkflowID}"
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]